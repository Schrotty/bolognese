!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=2)}([function(e,t,o){(function(o){var n;
/*!
 *  howler.js v2.1.3
 *  howlerjs.com
 *
 *  (c) 2013-2019, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */!function(){"use strict";var r=function(){this.init()};r.prototype={init:function(){var e=this||i;return e._counter=1e3,e._html5AudioPool=[],e.html5PoolSize=10,e._codecs={},e._howls=[],e._muted=!1,e._volume=1,e._canPlayEvent="canplaythrough",e._navigator="undefined"!=typeof window&&window.navigator?window.navigator:null,e.masterGain=null,e.noAudio=!1,e.usingWebAudio=!0,e.autoSuspend=!0,e.ctx=null,e.autoUnlock=!0,e._setup(),e},volume:function(e){var t=this||i;if(e=parseFloat(e),t.ctx||p(),void 0!==e&&e>=0&&e<=1){if(t._volume=e,t._muted)return t;t.usingWebAudio&&t.masterGain.gain.setValueAtTime(e,i.ctx.currentTime);for(var o=0;o<t._howls.length;o++)if(!t._howls[o]._webAudio)for(var n=t._howls[o]._getSoundIds(),r=0;r<n.length;r++){var a=t._howls[o]._soundById(n[r]);a&&a._node&&(a._node.volume=a._volume*e)}return t}return t._volume},mute:function(e){var t=this||i;t.ctx||p(),t._muted=e,t.usingWebAudio&&t.masterGain.gain.setValueAtTime(e?0:t._volume,i.ctx.currentTime);for(var o=0;o<t._howls.length;o++)if(!t._howls[o]._webAudio)for(var n=t._howls[o]._getSoundIds(),r=0;r<n.length;r++){var a=t._howls[o]._soundById(n[r]);a&&a._node&&(a._node.muted=!!e||a._muted)}return t},unload:function(){for(var e=this||i,t=e._howls.length-1;t>=0;t--)e._howls[t].unload();return e.usingWebAudio&&e.ctx&&void 0!==e.ctx.close&&(e.ctx.close(),e.ctx=null,p()),e},codecs:function(e){return(this||i)._codecs[e.replace(/^x-/,"")]},_setup:function(){var e=this||i;if(e.state=e.ctx&&e.ctx.state||"suspended",e._autoSuspend(),!e.usingWebAudio)if("undefined"!=typeof Audio)try{void 0===(new Audio).oncanplaythrough&&(e._canPlayEvent="canplay")}catch(t){e.noAudio=!0}else e.noAudio=!0;try{(new Audio).muted&&(e.noAudio=!0)}catch(e){}return e.noAudio||e._setupCodecs(),e},_setupCodecs:function(){var e=this||i,t=null;try{t="undefined"!=typeof Audio?new Audio:null}catch(t){return e}if(!t||"function"!=typeof t.canPlayType)return e;var o=t.canPlayType("audio/mpeg;").replace(/^no$/,""),n=e._navigator&&e._navigator.userAgent.match(/OPR\/([0-6].)/g),r=n&&parseInt(n[0].split("/")[1],10)<33;return e._codecs={mp3:!(r||!o&&!t.canPlayType("audio/mp3;").replace(/^no$/,"")),mpeg:!!o,opus:!!t.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),oga:!!t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!t.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),aac:!!t.canPlayType("audio/aac;").replace(/^no$/,""),caf:!!t.canPlayType("audio/x-caf;").replace(/^no$/,""),m4a:!!(t.canPlayType("audio/x-m4a;")||t.canPlayType("audio/m4a;")||t.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(t.canPlayType("audio/x-mp4;")||t.canPlayType("audio/mp4;")||t.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!t.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),webm:!!t.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),dolby:!!t.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/,""),flac:!!(t.canPlayType("audio/x-flac;")||t.canPlayType("audio/flac;")).replace(/^no$/,"")},e},_unlockAudio:function(){var e=this||i;if(!e._audioUnlocked&&e.ctx){e._audioUnlocked=!1,e.autoUnlock=!1,e._mobileUnloaded||44100===e.ctx.sampleRate||(e._mobileUnloaded=!0,e.unload()),e._scratchBuffer=e.ctx.createBuffer(1,1,22050);var t=function(o){for(var n=0;n<e.html5PoolSize;n++)try{var r=new Audio;r._unlocked=!0,e._releaseHtml5Audio(r)}catch(o){e.noAudio=!0}for(n=0;n<e._howls.length;n++)if(!e._howls[n]._webAudio)for(var i=e._howls[n]._getSoundIds(),a=0;a<i.length;a++){var s=e._howls[n]._soundById(i[a]);s&&s._node&&!s._node._unlocked&&(s._node._unlocked=!0,s._node.load())}e._autoResume();var u=e.ctx.createBufferSource();u.buffer=e._scratchBuffer,u.connect(e.ctx.destination),void 0===u.start?u.noteOn(0):u.start(0),"function"==typeof e.ctx.resume&&e.ctx.resume(),u.onended=function(){u.disconnect(0),e._audioUnlocked=!0,document.removeEventListener("touchstart",t,!0),document.removeEventListener("touchend",t,!0),document.removeEventListener("click",t,!0);for(var o=0;o<e._howls.length;o++)e._howls[o]._emit("unlock")}};return document.addEventListener("touchstart",t,!0),document.addEventListener("touchend",t,!0),document.addEventListener("click",t,!0),e}},_obtainHtml5Audio:function(){var e=this||i;if(e._html5AudioPool.length)return e._html5AudioPool.pop();var t=(new Audio).play();return t&&"undefined"!=typeof Promise&&(t instanceof Promise||"function"==typeof t.then)&&t.catch((function(){console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.")})),new Audio},_releaseHtml5Audio:function(e){var t=this||i;return e._unlocked&&t._html5AudioPool.push(e),t},_autoSuspend:function(){var e=this;if(e.autoSuspend&&e.ctx&&void 0!==e.ctx.suspend&&i.usingWebAudio){for(var t=0;t<e._howls.length;t++)if(e._howls[t]._webAudio)for(var o=0;o<e._howls[t]._sounds.length;o++)if(!e._howls[t]._sounds[o]._paused)return e;return e._suspendTimer&&clearTimeout(e._suspendTimer),e._suspendTimer=setTimeout((function(){e.autoSuspend&&(e._suspendTimer=null,e.state="suspending",e.ctx.suspend().then((function(){e.state="suspended",e._resumeAfterSuspend&&(delete e._resumeAfterSuspend,e._autoResume())})))}),3e4),e}},_autoResume:function(){var e=this;if(e.ctx&&void 0!==e.ctx.resume&&i.usingWebAudio)return"running"===e.state&&e._suspendTimer?(clearTimeout(e._suspendTimer),e._suspendTimer=null):"suspended"===e.state?(e.ctx.resume().then((function(){e.state="running";for(var t=0;t<e._howls.length;t++)e._howls[t]._emit("resume")})),e._suspendTimer&&(clearTimeout(e._suspendTimer),e._suspendTimer=null)):"suspending"===e.state&&(e._resumeAfterSuspend=!0),e}};var i=new r,a=function(e){e.src&&0!==e.src.length?this.init(e):console.error("An array of source files must be passed with any new Howl.")};a.prototype={init:function(e){var t=this;return i.ctx||p(),t._autoplay=e.autoplay||!1,t._format="string"!=typeof e.format?e.format:[e.format],t._html5=e.html5||!1,t._muted=e.mute||!1,t._loop=e.loop||!1,t._pool=e.pool||5,t._preload="boolean"!=typeof e.preload||e.preload,t._rate=e.rate||1,t._sprite=e.sprite||{},t._src="string"!=typeof e.src?e.src:[e.src],t._volume=void 0!==e.volume?e.volume:1,t._xhrWithCredentials=e.xhrWithCredentials||!1,t._duration=0,t._state="unloaded",t._sounds=[],t._endTimers={},t._queue=[],t._playLock=!1,t._onend=e.onend?[{fn:e.onend}]:[],t._onfade=e.onfade?[{fn:e.onfade}]:[],t._onload=e.onload?[{fn:e.onload}]:[],t._onloaderror=e.onloaderror?[{fn:e.onloaderror}]:[],t._onplayerror=e.onplayerror?[{fn:e.onplayerror}]:[],t._onpause=e.onpause?[{fn:e.onpause}]:[],t._onplay=e.onplay?[{fn:e.onplay}]:[],t._onstop=e.onstop?[{fn:e.onstop}]:[],t._onmute=e.onmute?[{fn:e.onmute}]:[],t._onvolume=e.onvolume?[{fn:e.onvolume}]:[],t._onrate=e.onrate?[{fn:e.onrate}]:[],t._onseek=e.onseek?[{fn:e.onseek}]:[],t._onunlock=e.onunlock?[{fn:e.onunlock}]:[],t._onresume=[],t._webAudio=i.usingWebAudio&&!t._html5,void 0!==i.ctx&&i.ctx&&i.autoUnlock&&i._unlockAudio(),i._howls.push(t),t._autoplay&&t._queue.push({event:"play",action:function(){t.play()}}),t._preload&&t.load(),t},load:function(){var e=null;if(i.noAudio)this._emit("loaderror",null,"No audio support.");else{"string"==typeof this._src&&(this._src=[this._src]);for(var t=0;t<this._src.length;t++){var o,n;if(this._format&&this._format[t])o=this._format[t];else{if("string"!=typeof(n=this._src[t])){this._emit("loaderror",null,"Non-string found in selected audio sources - ignoring.");continue}(o=/^data:audio\/([^;,]+);/i.exec(n))||(o=/\.([^.]+)$/.exec(n.split("?",1)[0])),o&&(o=o[1].toLowerCase())}if(o||console.warn('No file extension was found. Consider using the "format" property or specify an extension.'),o&&i.codecs(o)){e=this._src[t];break}}if(e)return this._src=e,this._state="loading","https:"===window.location.protocol&&"http:"===e.slice(0,5)&&(this._html5=!0,this._webAudio=!1),new s(this),this._webAudio&&d(this),this;this._emit("loaderror",null,"No codec support for selected audio sources.")}},play:function(e,t){var o=this,n=null;if("number"==typeof e)n=e,e=null;else{if("string"==typeof e&&"loaded"===o._state&&!o._sprite[e])return null;if(void 0===e&&(e="__default",!o._playLock)){for(var r=0,a=0;a<o._sounds.length;a++)o._sounds[a]._paused&&!o._sounds[a]._ended&&(r++,n=o._sounds[a]._id);1===r?e=null:n=null}}var s=n?o._soundById(n):o._inactiveSound();if(!s)return null;if(n&&!e&&(e=s._sprite||"__default"),"loaded"!==o._state){s._sprite=e,s._ended=!1;var u=s._id;return o._queue.push({event:"play",action:function(){o.play(u)}}),u}if(n&&!s._paused)return t||o._loadQueue("play"),s._id;o._webAudio&&i._autoResume();var d=Math.max(0,s._seek>0?s._seek:o._sprite[e][0]/1e3),l=Math.max(0,(o._sprite[e][0]+o._sprite[e][1])/1e3-d),c=1e3*l/Math.abs(s._rate),_=o._sprite[e][0]/1e3,p=(o._sprite[e][0]+o._sprite[e][1])/1e3;s._sprite=e,s._ended=!1;var f=function(){s._paused=!1,s._seek=d,s._start=_,s._stop=p,s._loop=!(!s._loop&&!o._sprite[e][2])};if(!(d>=p)){var h=s._node;if(o._webAudio){var m=function(){o._playLock=!1,f(),o._refreshBuffer(s);var e=s._muted||o._muted?0:s._volume;h.gain.setValueAtTime(e,i.ctx.currentTime),s._playStart=i.ctx.currentTime,void 0===h.bufferSource.start?s._loop?h.bufferSource.noteGrainOn(0,d,86400):h.bufferSource.noteGrainOn(0,d,l):s._loop?h.bufferSource.start(0,d,86400):h.bufferSource.start(0,d,l),c!==1/0&&(o._endTimers[s._id]=setTimeout(o._ended.bind(o,s),c)),t||setTimeout((function(){o._emit("play",s._id),o._loadQueue()}),0)};"running"===i.state?m():(o._playLock=!0,o.once("resume",m),o._clearTimer(s._id))}else{var v=function(){h.currentTime=d,h.muted=s._muted||o._muted||i._muted||h.muted,h.volume=s._volume*i.volume(),h.playbackRate=s._rate;try{var n=h.play();if(n&&"undefined"!=typeof Promise&&(n instanceof Promise||"function"==typeof n.then)?(o._playLock=!0,f(),n.then((function(){o._playLock=!1,h._unlocked=!0,t||(o._emit("play",s._id),o._loadQueue())})).catch((function(){o._playLock=!1,o._emit("playerror",s._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."),s._ended=!0,s._paused=!0}))):t||(o._playLock=!1,f(),o._emit("play",s._id),o._loadQueue()),h.playbackRate=s._rate,h.paused)return void o._emit("playerror",s._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");"__default"!==e||s._loop?o._endTimers[s._id]=setTimeout(o._ended.bind(o,s),c):(o._endTimers[s._id]=function(){o._ended(s),h.removeEventListener("ended",o._endTimers[s._id],!1)},h.addEventListener("ended",o._endTimers[s._id],!1))}catch(e){o._emit("playerror",s._id,e)}};"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"===h.src&&(h.src=o._src,h.load());var y=window&&window.ejecta||!h.readyState&&i._navigator.isCocoonJS;if(h.readyState>=3||y)v();else{o._playLock=!0;var g=function(){v(),h.removeEventListener(i._canPlayEvent,g,!1)};h.addEventListener(i._canPlayEvent,g,!1),o._clearTimer(s._id)}}return s._id}o._ended(s)},pause:function(e){var t=this;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"pause",action:function(){t.pause(e)}}),t;for(var o=t._getSoundIds(e),n=0;n<o.length;n++){t._clearTimer(o[n]);var r=t._soundById(o[n]);if(r&&!r._paused&&(r._seek=t.seek(o[n]),r._rateSeek=0,r._paused=!0,t._stopFade(o[n]),r._node))if(t._webAudio){if(!r._node.bufferSource)continue;void 0===r._node.bufferSource.stop?r._node.bufferSource.noteOff(0):r._node.bufferSource.stop(0),t._cleanBuffer(r._node)}else isNaN(r._node.duration)&&r._node.duration!==1/0||r._node.pause();arguments[1]||t._emit("pause",r?r._id:null)}return t},stop:function(e,t){var o=this;if("loaded"!==o._state||o._playLock)return o._queue.push({event:"stop",action:function(){o.stop(e)}}),o;for(var n=o._getSoundIds(e),r=0;r<n.length;r++){o._clearTimer(n[r]);var i=o._soundById(n[r]);i&&(i._seek=i._start||0,i._rateSeek=0,i._paused=!0,i._ended=!0,o._stopFade(n[r]),i._node&&(o._webAudio?i._node.bufferSource&&(void 0===i._node.bufferSource.stop?i._node.bufferSource.noteOff(0):i._node.bufferSource.stop(0),o._cleanBuffer(i._node)):isNaN(i._node.duration)&&i._node.duration!==1/0||(i._node.currentTime=i._start||0,i._node.pause(),i._node.duration===1/0&&o._clearSound(i._node))),t||o._emit("stop",i._id))}return o},mute:function(e,t){var o=this;if("loaded"!==o._state||o._playLock)return o._queue.push({event:"mute",action:function(){o.mute(e,t)}}),o;if(void 0===t){if("boolean"!=typeof e)return o._muted;o._muted=e}for(var n=o._getSoundIds(t),r=0;r<n.length;r++){var a=o._soundById(n[r]);a&&(a._muted=e,a._interval&&o._stopFade(a._id),o._webAudio&&a._node?a._node.gain.setValueAtTime(e?0:a._volume,i.ctx.currentTime):a._node&&(a._node.muted=!!i._muted||e),o._emit("mute",a._id))}return o},volume:function(){var e,t,o,n=this,r=arguments;if(0===r.length)return n._volume;if(1===r.length||2===r.length&&void 0===r[1]){var a=n._getSoundIds(),s=a.indexOf(r[0]);s>=0?t=parseInt(r[0],10):e=parseFloat(r[0])}else r.length>=2&&(e=parseFloat(r[0]),t=parseInt(r[1],10));if(!(void 0!==e&&e>=0&&e<=1))return(o=t?n._soundById(t):n._sounds[0])?o._volume:0;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"volume",action:function(){n.volume.apply(n,r)}}),n;void 0===t&&(n._volume=e),t=n._getSoundIds(t);for(var u=0;u<t.length;u++)(o=n._soundById(t[u]))&&(o._volume=e,r[2]||n._stopFade(t[u]),n._webAudio&&o._node&&!o._muted?o._node.gain.setValueAtTime(e,i.ctx.currentTime):o._node&&!o._muted&&(o._node.volume=e*i.volume()),n._emit("volume",o._id));return n},fade:function(e,t,o,n){var r=this;if("loaded"!==r._state||r._playLock)return r._queue.push({event:"fade",action:function(){r.fade(e,t,o,n)}}),r;e=parseFloat(e),t=parseFloat(t),o=parseFloat(o),r.volume(e,n);for(var a=r._getSoundIds(n),s=0;s<a.length;s++){var u=r._soundById(a[s]);if(u){if(n||r._stopFade(a[s]),r._webAudio&&!u._muted){var d=i.ctx.currentTime,l=d+o/1e3;u._volume=e,u._node.gain.setValueAtTime(e,d),u._node.gain.linearRampToValueAtTime(t,l)}r._startFadeInterval(u,e,t,o,a[s],void 0===n)}}return r},_startFadeInterval:function(e,t,o,n,r,i){var a=this,s=t,u=o-t,d=Math.abs(u/.01),l=Math.max(4,d>0?n/d:n),c=Date.now();e._fadeTo=o,e._interval=setInterval((function(){var r=(Date.now()-c)/n;c=Date.now(),s+=u*r,s=Math.max(0,s),s=Math.min(1,s),s=Math.round(100*s)/100,a._webAudio?e._volume=s:a.volume(s,e._id,!0),i&&(a._volume=s),(o<t&&s<=o||o>t&&s>=o)&&(clearInterval(e._interval),e._interval=null,e._fadeTo=null,a.volume(o,e._id),a._emit("fade",e._id))}),l)},_stopFade:function(e){var t=this._soundById(e);return t&&t._interval&&(this._webAudio&&t._node.gain.cancelScheduledValues(i.ctx.currentTime),clearInterval(t._interval),t._interval=null,this.volume(t._fadeTo,e),t._fadeTo=null,this._emit("fade",e)),this},loop:function(){var e,t,o,n=this,r=arguments;if(0===r.length)return n._loop;if(1===r.length){if("boolean"!=typeof r[0])return!!(o=n._soundById(parseInt(r[0],10)))&&o._loop;e=r[0],n._loop=e}else 2===r.length&&(e=r[0],t=parseInt(r[1],10));for(var i=n._getSoundIds(t),a=0;a<i.length;a++)(o=n._soundById(i[a]))&&(o._loop=e,n._webAudio&&o._node&&o._node.bufferSource&&(o._node.bufferSource.loop=e,e&&(o._node.bufferSource.loopStart=o._start||0,o._node.bufferSource.loopEnd=o._stop)));return n},rate:function(){var e,t,o,n=this,r=arguments;if(0===r.length)t=n._sounds[0]._id;else if(1===r.length){var a=n._getSoundIds(),s=a.indexOf(r[0]);s>=0?t=parseInt(r[0],10):e=parseFloat(r[0])}else 2===r.length&&(e=parseFloat(r[0]),t=parseInt(r[1],10));if("number"!=typeof e)return(o=n._soundById(t))?o._rate:n._rate;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"rate",action:function(){n.rate.apply(n,r)}}),n;void 0===t&&(n._rate=e),t=n._getSoundIds(t);for(var u=0;u<t.length;u++)if(o=n._soundById(t[u])){n.playing(t[u])&&(o._rateSeek=n.seek(t[u]),o._playStart=n._webAudio?i.ctx.currentTime:o._playStart),o._rate=e,n._webAudio&&o._node&&o._node.bufferSource?o._node.bufferSource.playbackRate.setValueAtTime(e,i.ctx.currentTime):o._node&&(o._node.playbackRate=e);var d=n.seek(t[u]),l=(n._sprite[o._sprite][0]+n._sprite[o._sprite][1])/1e3-d,c=1e3*l/Math.abs(o._rate);!n._endTimers[t[u]]&&o._paused||(n._clearTimer(t[u]),n._endTimers[t[u]]=setTimeout(n._ended.bind(n,o),c)),n._emit("rate",o._id)}return n},seek:function(){var e,t,o=this,n=arguments;if(0===n.length)t=o._sounds[0]._id;else if(1===n.length){var r=o._getSoundIds(),a=r.indexOf(n[0]);a>=0?t=parseInt(n[0],10):o._sounds.length&&(t=o._sounds[0]._id,e=parseFloat(n[0]))}else 2===n.length&&(e=parseFloat(n[0]),t=parseInt(n[1],10));if(void 0===t)return o;if("loaded"!==o._state||o._playLock)return o._queue.push({event:"seek",action:function(){o.seek.apply(o,n)}}),o;var s=o._soundById(t);if(s){if(!("number"==typeof e&&e>=0)){if(o._webAudio){var u=o.playing(t)?i.ctx.currentTime-s._playStart:0,d=s._rateSeek?s._rateSeek-s._seek:0;return s._seek+(d+u*Math.abs(s._rate))}return s._node.currentTime}var l=o.playing(t);l&&o.pause(t,!0),s._seek=e,s._ended=!1,o._clearTimer(t),o._webAudio||!s._node||isNaN(s._node.duration)||(s._node.currentTime=e);var c=function(){o._emit("seek",t),l&&o.play(t,!0)};if(l&&!o._webAudio){var _=function(){o._playLock?setTimeout(_,0):c()};setTimeout(_,0)}else c()}return o},playing:function(e){if("number"==typeof e){var t=this._soundById(e);return!!t&&!t._paused}for(var o=0;o<this._sounds.length;o++)if(!this._sounds[o]._paused)return!0;return!1},duration:function(e){var t=this._duration,o=this._soundById(e);return o&&(t=this._sprite[o._sprite][1]/1e3),t},state:function(){return this._state},unload:function(){for(var e=this,t=e._sounds,o=0;o<t.length;o++)t[o]._paused||e.stop(t[o]._id),e._webAudio||(e._clearSound(t[o]._node),t[o]._node.removeEventListener("error",t[o]._errorFn,!1),t[o]._node.removeEventListener(i._canPlayEvent,t[o]._loadFn,!1),i._releaseHtml5Audio(t[o]._node)),delete t[o]._node,e._clearTimer(t[o]._id);var n=i._howls.indexOf(e);n>=0&&i._howls.splice(n,1);var r=!0;for(o=0;o<i._howls.length;o++)if(i._howls[o]._src===e._src||e._src.indexOf(i._howls[o]._src)>=0){r=!1;break}return u&&r&&delete u[e._src],i.noAudio=!1,e._state="unloaded",e._sounds=[],e=null,null},on:function(e,t,o,n){var r=this["_on"+e];return"function"==typeof t&&r.push(n?{id:o,fn:t,once:n}:{id:o,fn:t}),this},off:function(e,t,o){var n=this["_on"+e],r=0;if("number"==typeof t&&(o=t,t=null),t||o)for(r=0;r<n.length;r++){var i=o===n[r].id;if(t===n[r].fn&&i||!t&&i){n.splice(r,1);break}}else if(e)this["_on"+e]=[];else{var a=Object.keys(this);for(r=0;r<a.length;r++)0===a[r].indexOf("_on")&&Array.isArray(this[a[r]])&&(this[a[r]]=[])}return this},once:function(e,t,o){return this.on(e,t,o,1),this},_emit:function(e,t,o){for(var n=this["_on"+e],r=n.length-1;r>=0;r--)n[r].id&&n[r].id!==t&&"load"!==e||(setTimeout(function(e){e.call(this,t,o)}.bind(this,n[r].fn),0),n[r].once&&this.off(e,n[r].fn,n[r].id));return this._loadQueue(e),this},_loadQueue:function(e){if(this._queue.length>0){var t=this._queue[0];t.event===e&&(this._queue.shift(),this._loadQueue()),e||t.action()}return this},_ended:function(e){var t=e._sprite;if(!this._webAudio&&e._node&&!e._node.paused&&!e._node.ended&&e._node.currentTime<e._stop)return setTimeout(this._ended.bind(this,e),100),this;var o=!(!e._loop&&!this._sprite[t][2]);if(this._emit("end",e._id),!this._webAudio&&o&&this.stop(e._id,!0).play(e._id),this._webAudio&&o){this._emit("play",e._id),e._seek=e._start||0,e._rateSeek=0,e._playStart=i.ctx.currentTime;var n=1e3*(e._stop-e._start)/Math.abs(e._rate);this._endTimers[e._id]=setTimeout(this._ended.bind(this,e),n)}return this._webAudio&&!o&&(e._paused=!0,e._ended=!0,e._seek=e._start||0,e._rateSeek=0,this._clearTimer(e._id),this._cleanBuffer(e._node),i._autoSuspend()),this._webAudio||o||this.stop(e._id,!0),this},_clearTimer:function(e){if(this._endTimers[e]){if("function"!=typeof this._endTimers[e])clearTimeout(this._endTimers[e]);else{var t=this._soundById(e);t&&t._node&&t._node.removeEventListener("ended",this._endTimers[e],!1)}delete this._endTimers[e]}return this},_soundById:function(e){for(var t=0;t<this._sounds.length;t++)if(e===this._sounds[t]._id)return this._sounds[t];return null},_inactiveSound:function(){this._drain();for(var e=0;e<this._sounds.length;e++)if(this._sounds[e]._ended)return this._sounds[e].reset();return new s(this)},_drain:function(){var e=this._pool,t=0,o=0;if(!(this._sounds.length<e)){for(o=0;o<this._sounds.length;o++)this._sounds[o]._ended&&t++;for(o=this._sounds.length-1;o>=0;o--){if(t<=e)return;this._sounds[o]._ended&&(this._webAudio&&this._sounds[o]._node&&this._sounds[o]._node.disconnect(0),this._sounds.splice(o,1),t--)}}},_getSoundIds:function(e){if(void 0===e){for(var t=[],o=0;o<this._sounds.length;o++)t.push(this._sounds[o]._id);return t}return[e]},_refreshBuffer:function(e){return e._node.bufferSource=i.ctx.createBufferSource(),e._node.bufferSource.buffer=u[this._src],e._panner?e._node.bufferSource.connect(e._panner):e._node.bufferSource.connect(e._node),e._node.bufferSource.loop=e._loop,e._loop&&(e._node.bufferSource.loopStart=e._start||0,e._node.bufferSource.loopEnd=e._stop||0),e._node.bufferSource.playbackRate.setValueAtTime(e._rate,i.ctx.currentTime),this},_cleanBuffer:function(e){var t=i._navigator&&i._navigator.vendor.indexOf("Apple")>=0;if(i._scratchBuffer&&e.bufferSource&&(e.bufferSource.onended=null,e.bufferSource.disconnect(0),t))try{e.bufferSource.buffer=i._scratchBuffer}catch(e){}return e.bufferSource=null,this},_clearSound:function(e){/MSIE |Trident\//.test(i._navigator&&i._navigator.userAgent)||(e.src="data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA")}};var s=function(e){this._parent=e,this.init()};s.prototype={init:function(){var e=this._parent;return this._muted=e._muted,this._loop=e._loop,this._volume=e._volume,this._rate=e._rate,this._seek=0,this._paused=!0,this._ended=!0,this._sprite="__default",this._id=++i._counter,e._sounds.push(this),this.create(),this},create:function(){var e=this._parent,t=i._muted||this._muted||this._parent._muted?0:this._volume;return e._webAudio?(this._node=void 0===i.ctx.createGain?i.ctx.createGainNode():i.ctx.createGain(),this._node.gain.setValueAtTime(t,i.ctx.currentTime),this._node.paused=!0,this._node.connect(i.masterGain)):i.noAudio||(this._node=i._obtainHtml5Audio(),this._errorFn=this._errorListener.bind(this),this._node.addEventListener("error",this._errorFn,!1),this._loadFn=this._loadListener.bind(this),this._node.addEventListener(i._canPlayEvent,this._loadFn,!1),this._node.src=e._src,this._node.preload="auto",this._node.volume=t*i.volume(),this._node.load()),this},reset:function(){var e=this._parent;return this._muted=e._muted,this._loop=e._loop,this._volume=e._volume,this._rate=e._rate,this._seek=0,this._rateSeek=0,this._paused=!0,this._ended=!0,this._sprite="__default",this._id=++i._counter,this},_errorListener:function(){this._parent._emit("loaderror",this._id,this._node.error?this._node.error.code:0),this._node.removeEventListener("error",this._errorFn,!1)},_loadListener:function(){var e=this._parent;e._duration=Math.ceil(10*this._node.duration)/10,0===Object.keys(e._sprite).length&&(e._sprite={__default:[0,1e3*e._duration]}),"loaded"!==e._state&&(e._state="loaded",e._emit("load"),e._loadQueue()),this._node.removeEventListener(i._canPlayEvent,this._loadFn,!1)}};var u={},d=function(e){var t=e._src;if(u[t])return e._duration=u[t].duration,void _(e);if(/^data:[^;]+;base64,/.test(t)){for(var o=atob(t.split(",")[1]),n=new Uint8Array(o.length),r=0;r<o.length;++r)n[r]=o.charCodeAt(r);c(n.buffer,e)}else{var i=new XMLHttpRequest;i.open("GET",t,!0),i.withCredentials=e._xhrWithCredentials,i.responseType="arraybuffer",i.onload=function(){var t=(i.status+"")[0];"0"===t||"2"===t||"3"===t?c(i.response,e):e._emit("loaderror",null,"Failed loading audio file with status: "+i.status+".")},i.onerror=function(){e._webAudio&&(e._html5=!0,e._webAudio=!1,e._sounds=[],delete u[t],e.load())},l(i)}},l=function(e){try{e.send()}catch(t){e.onerror()}},c=function(e,t){var o=function(){t._emit("loaderror",null,"Decoding audio data failed.")},n=function(e){e&&t._sounds.length>0?(u[t._src]=e,_(t,e)):o()};"undefined"!=typeof Promise&&1===i.ctx.decodeAudioData.length?i.ctx.decodeAudioData(e).then(n).catch(o):i.ctx.decodeAudioData(e,n,o)},_=function(e,t){t&&!e._duration&&(e._duration=t.duration),0===Object.keys(e._sprite).length&&(e._sprite={__default:[0,1e3*e._duration]}),"loaded"!==e._state&&(e._state="loaded",e._emit("load"),e._loadQueue())},p=function(){if(i.usingWebAudio){try{"undefined"!=typeof AudioContext?i.ctx=new AudioContext:"undefined"!=typeof webkitAudioContext?i.ctx=new webkitAudioContext:i.usingWebAudio=!1}catch(e){i.usingWebAudio=!1}i.ctx||(i.usingWebAudio=!1);var e=/iP(hone|od|ad)/.test(i._navigator&&i._navigator.platform),t=i._navigator&&i._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),o=t?parseInt(t[1],10):null;if(e&&o&&o<9){var n=/safari/.test(i._navigator&&i._navigator.userAgent.toLowerCase());(i._navigator&&i._navigator.standalone&&!n||i._navigator&&!i._navigator.standalone&&!n)&&(i.usingWebAudio=!1)}i.usingWebAudio&&(i.masterGain=void 0===i.ctx.createGain?i.ctx.createGainNode():i.ctx.createGain(),i.masterGain.gain.setValueAtTime(i._muted?0:i._volume,i.ctx.currentTime),i.masterGain.connect(i.ctx.destination)),i._setup()}};void 0===(n=function(){return{Howler:i,Howl:a}}.apply(t,[]))||(e.exports=n),t.Howler=i,t.Howl=a,"undefined"!=typeof window?(window.HowlerGlobal=r,window.Howler=i,window.Howl=a,window.Sound=s):void 0!==o&&(o.HowlerGlobal=r,o.Howler=i,o.Howl=a,o.Sound=s)}(),
/*!
 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
 *  
 *  howler.js v2.1.3
 *  howlerjs.com
 *
 *  (c) 2013-2019, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
function(){"use strict";var e;HowlerGlobal.prototype._pos=[0,0,0],HowlerGlobal.prototype._orientation=[0,0,-1,0,1,0],HowlerGlobal.prototype.stereo=function(e){if(!this.ctx||!this.ctx.listener)return this;for(var t=this._howls.length-1;t>=0;t--)this._howls[t].stereo(e);return this},HowlerGlobal.prototype.pos=function(e,t,o){return this.ctx&&this.ctx.listener?(t="number"!=typeof t?this._pos[1]:t,o="number"!=typeof o?this._pos[2]:o,"number"!=typeof e?this._pos:(this._pos=[e,t,o],void 0!==this.ctx.listener.positionX?(this.ctx.listener.positionX.setTargetAtTime(this._pos[0],Howler.ctx.currentTime,.1),this.ctx.listener.positionY.setTargetAtTime(this._pos[1],Howler.ctx.currentTime,.1),this.ctx.listener.positionZ.setTargetAtTime(this._pos[2],Howler.ctx.currentTime,.1)):this.ctx.listener.setPosition(this._pos[0],this._pos[1],this._pos[2]),this)):this},HowlerGlobal.prototype.orientation=function(e,t,o,n,r,i){if(!this.ctx||!this.ctx.listener)return this;var a=this._orientation;return t="number"!=typeof t?a[1]:t,o="number"!=typeof o?a[2]:o,n="number"!=typeof n?a[3]:n,r="number"!=typeof r?a[4]:r,i="number"!=typeof i?a[5]:i,"number"!=typeof e?a:(this._orientation=[e,t,o,n,r,i],void 0!==this.ctx.listener.forwardX?(this.ctx.listener.forwardX.setTargetAtTime(e,Howler.ctx.currentTime,.1),this.ctx.listener.forwardY.setTargetAtTime(t,Howler.ctx.currentTime,.1),this.ctx.listener.forwardZ.setTargetAtTime(o,Howler.ctx.currentTime,.1),this.ctx.listener.upX.setTargetAtTime(n,Howler.ctx.currentTime,.1),this.ctx.listener.upY.setTargetAtTime(r,Howler.ctx.currentTime,.1),this.ctx.listener.upZ.setTargetAtTime(i,Howler.ctx.currentTime,.1)):this.ctx.listener.setOrientation(e,t,o,n,r,i),this)},Howl.prototype.init=(e=Howl.prototype.init,function(t){return this._orientation=t.orientation||[1,0,0],this._stereo=t.stereo||null,this._pos=t.pos||null,this._pannerAttr={coneInnerAngle:void 0!==t.coneInnerAngle?t.coneInnerAngle:360,coneOuterAngle:void 0!==t.coneOuterAngle?t.coneOuterAngle:360,coneOuterGain:void 0!==t.coneOuterGain?t.coneOuterGain:0,distanceModel:void 0!==t.distanceModel?t.distanceModel:"inverse",maxDistance:void 0!==t.maxDistance?t.maxDistance:1e4,panningModel:void 0!==t.panningModel?t.panningModel:"HRTF",refDistance:void 0!==t.refDistance?t.refDistance:1,rolloffFactor:void 0!==t.rolloffFactor?t.rolloffFactor:1},this._onstereo=t.onstereo?[{fn:t.onstereo}]:[],this._onpos=t.onpos?[{fn:t.onpos}]:[],this._onorientation=t.onorientation?[{fn:t.onorientation}]:[],e.call(this,t)}),Howl.prototype.stereo=function(e,o){var n=this;if(!n._webAudio)return n;if("loaded"!==n._state)return n._queue.push({event:"stereo",action:function(){n.stereo(e,o)}}),n;var r=void 0===Howler.ctx.createStereoPanner?"spatial":"stereo";if(void 0===o){if("number"!=typeof e)return n._stereo;n._stereo=e,n._pos=[e,0,0]}for(var i=n._getSoundIds(o),a=0;a<i.length;a++){var s=n._soundById(i[a]);if(s){if("number"!=typeof e)return s._stereo;s._stereo=e,s._pos=[e,0,0],s._node&&(s._pannerAttr.panningModel="equalpower",s._panner&&s._panner.pan||t(s,r),"spatial"===r?void 0!==s._panner.positionX?(s._panner.positionX.setValueAtTime(e,Howler.ctx.currentTime),s._panner.positionY.setValueAtTime(0,Howler.ctx.currentTime),s._panner.positionZ.setValueAtTime(0,Howler.ctx.currentTime)):s._panner.setPosition(e,0,0):s._panner.pan.setValueAtTime(e,Howler.ctx.currentTime)),n._emit("stereo",s._id)}}return n},Howl.prototype.pos=function(e,o,n,r){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"pos",action:function(){i.pos(e,o,n,r)}}),i;if(o="number"!=typeof o?0:o,n="number"!=typeof n?-.5:n,void 0===r){if("number"!=typeof e)return i._pos;i._pos=[e,o,n]}for(var a=i._getSoundIds(r),s=0;s<a.length;s++){var u=i._soundById(a[s]);if(u){if("number"!=typeof e)return u._pos;u._pos=[e,o,n],u._node&&(u._panner&&!u._panner.pan||t(u,"spatial"),void 0!==u._panner.positionX?(u._panner.positionX.setValueAtTime(e,Howler.ctx.currentTime),u._panner.positionY.setValueAtTime(o,Howler.ctx.currentTime),u._panner.positionZ.setValueAtTime(n,Howler.ctx.currentTime)):u._panner.setPosition(e,o,n)),i._emit("pos",u._id)}}return i},Howl.prototype.orientation=function(e,o,n,r){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"orientation",action:function(){i.orientation(e,o,n,r)}}),i;if(o="number"!=typeof o?i._orientation[1]:o,n="number"!=typeof n?i._orientation[2]:n,void 0===r){if("number"!=typeof e)return i._orientation;i._orientation=[e,o,n]}for(var a=i._getSoundIds(r),s=0;s<a.length;s++){var u=i._soundById(a[s]);if(u){if("number"!=typeof e)return u._orientation;u._orientation=[e,o,n],u._node&&(u._panner||(u._pos||(u._pos=i._pos||[0,0,-.5]),t(u,"spatial")),void 0!==u._panner.orientationX?(u._panner.orientationX.setValueAtTime(e,Howler.ctx.currentTime),u._panner.orientationY.setValueAtTime(o,Howler.ctx.currentTime),u._panner.orientationZ.setValueAtTime(n,Howler.ctx.currentTime)):u._panner.setOrientation(e,o,n)),i._emit("orientation",u._id)}}return i},Howl.prototype.pannerAttr=function(){var e,o,n,r=this,i=arguments;if(!r._webAudio)return r;if(0===i.length)return r._pannerAttr;if(1===i.length){if("object"!=typeof i[0])return(n=r._soundById(parseInt(i[0],10)))?n._pannerAttr:r._pannerAttr;e=i[0],void 0===o&&(e.pannerAttr||(e.pannerAttr={coneInnerAngle:e.coneInnerAngle,coneOuterAngle:e.coneOuterAngle,coneOuterGain:e.coneOuterGain,distanceModel:e.distanceModel,maxDistance:e.maxDistance,refDistance:e.refDistance,rolloffFactor:e.rolloffFactor,panningModel:e.panningModel}),r._pannerAttr={coneInnerAngle:void 0!==e.pannerAttr.coneInnerAngle?e.pannerAttr.coneInnerAngle:r._coneInnerAngle,coneOuterAngle:void 0!==e.pannerAttr.coneOuterAngle?e.pannerAttr.coneOuterAngle:r._coneOuterAngle,coneOuterGain:void 0!==e.pannerAttr.coneOuterGain?e.pannerAttr.coneOuterGain:r._coneOuterGain,distanceModel:void 0!==e.pannerAttr.distanceModel?e.pannerAttr.distanceModel:r._distanceModel,maxDistance:void 0!==e.pannerAttr.maxDistance?e.pannerAttr.maxDistance:r._maxDistance,refDistance:void 0!==e.pannerAttr.refDistance?e.pannerAttr.refDistance:r._refDistance,rolloffFactor:void 0!==e.pannerAttr.rolloffFactor?e.pannerAttr.rolloffFactor:r._rolloffFactor,panningModel:void 0!==e.pannerAttr.panningModel?e.pannerAttr.panningModel:r._panningModel})}else 2===i.length&&(e=i[0],o=parseInt(i[1],10));for(var a=r._getSoundIds(o),s=0;s<a.length;s++)if(n=r._soundById(a[s])){var u=n._pannerAttr;u={coneInnerAngle:void 0!==e.coneInnerAngle?e.coneInnerAngle:u.coneInnerAngle,coneOuterAngle:void 0!==e.coneOuterAngle?e.coneOuterAngle:u.coneOuterAngle,coneOuterGain:void 0!==e.coneOuterGain?e.coneOuterGain:u.coneOuterGain,distanceModel:void 0!==e.distanceModel?e.distanceModel:u.distanceModel,maxDistance:void 0!==e.maxDistance?e.maxDistance:u.maxDistance,refDistance:void 0!==e.refDistance?e.refDistance:u.refDistance,rolloffFactor:void 0!==e.rolloffFactor?e.rolloffFactor:u.rolloffFactor,panningModel:void 0!==e.panningModel?e.panningModel:u.panningModel};var d=n._panner;d?(d.coneInnerAngle=u.coneInnerAngle,d.coneOuterAngle=u.coneOuterAngle,d.coneOuterGain=u.coneOuterGain,d.distanceModel=u.distanceModel,d.maxDistance=u.maxDistance,d.refDistance=u.refDistance,d.rolloffFactor=u.rolloffFactor,d.panningModel=u.panningModel):(n._pos||(n._pos=r._pos||[0,0,-.5]),t(n,"spatial"))}return r},Sound.prototype.init=function(e){return function(){var t=this._parent;this._orientation=t._orientation,this._stereo=t._stereo,this._pos=t._pos,this._pannerAttr=t._pannerAttr,e.call(this),this._stereo?t.stereo(this._stereo):this._pos&&t.pos(this._pos[0],this._pos[1],this._pos[2],this._id)}}(Sound.prototype.init),Sound.prototype.reset=function(e){return function(){var t=this._parent;return this._orientation=t._orientation,this._stereo=t._stereo,this._pos=t._pos,this._pannerAttr=t._pannerAttr,this._stereo?t.stereo(this._stereo):this._pos?t.pos(this._pos[0],this._pos[1],this._pos[2],this._id):this._panner&&(this._panner.disconnect(0),this._panner=void 0,t._refreshBuffer(this)),e.call(this)}}(Sound.prototype.reset);var t=function(e,t){"spatial"===(t=t||"spatial")?(e._panner=Howler.ctx.createPanner(),e._panner.coneInnerAngle=e._pannerAttr.coneInnerAngle,e._panner.coneOuterAngle=e._pannerAttr.coneOuterAngle,e._panner.coneOuterGain=e._pannerAttr.coneOuterGain,e._panner.distanceModel=e._pannerAttr.distanceModel,e._panner.maxDistance=e._pannerAttr.maxDistance,e._panner.refDistance=e._pannerAttr.refDistance,e._panner.rolloffFactor=e._pannerAttr.rolloffFactor,e._panner.panningModel=e._pannerAttr.panningModel,void 0!==e._panner.positionX?(e._panner.positionX.setValueAtTime(e._pos[0],Howler.ctx.currentTime),e._panner.positionY.setValueAtTime(e._pos[1],Howler.ctx.currentTime),e._panner.positionZ.setValueAtTime(e._pos[2],Howler.ctx.currentTime)):e._panner.setPosition(e._pos[0],e._pos[1],e._pos[2]),void 0!==e._panner.orientationX?(e._panner.orientationX.setValueAtTime(e._orientation[0],Howler.ctx.currentTime),e._panner.orientationY.setValueAtTime(e._orientation[1],Howler.ctx.currentTime),e._panner.orientationZ.setValueAtTime(e._orientation[2],Howler.ctx.currentTime)):e._panner.setOrientation(e._orientation[0],e._orientation[1],e._orientation[2])):(e._panner=Howler.ctx.createStereoPanner(),e._panner.pan.setValueAtTime(e._stereo,Howler.ctx.currentTime)),e._panner.connect(e._node),e._paused||e._parent.pause(e._id,!0).play(e._id,!0)}}()}).call(this,o(1))},function(e,t){var o;o=function(){return this}();try{o=o||new Function("return this")()}catch(e){"object"==typeof window&&(o=window)}e.exports=o},function(e,t,o){"use strict";o.r(t);var n,r=o(0),i=function(){function e(){}return e.exists=function(){return localStorage.length>0},e.store=function(e,t){localStorage.setItem(e,t)},e.load=function(e){return localStorage.getItem(e)},e.loadBoolean=function(t){return JSON.parse(e.load(t))},e.exist=function(t){return null!=e.load(t)},e.storeIfNull=function(t,o){e.exist(t)||e.store(t,o)},e}();!function(e){e.Pomodoro="Pomodoro",e.LongBreak="Long Break",e.ShortBreak="Short Break"}(n||(n={}));var a=function(){function e(e){var t=this;"serviceWorker"in navigator&&window.addEventListener("load",(function(){navigator.serviceWorker.register("/worker.js").then((function(e){console.log("ServiceWorker registration successful with scope: ",e.scope)}),(function(e){console.log("ServiceWorker registration failed: ",e)}))})),this.initSettings(),this.timerType=n.Pomodoro,this.timer=document.querySelector("#timer"),this.timerSub=document.querySelector("#timer-sub"),this.pomodoroButton=document.querySelector("#pomodoro-button"),this.pomodoroButton.addEventListener("click",(function(){return t.updateTimer(i.load("pomodoro"),n.Pomodoro)})),this.longBreakButton=document.querySelector("#l-break-button"),this.longBreakButton.addEventListener("click",(function(){return t.updateTimer(i.load("long-break"),n.LongBreak)})),this.shortBreakButton=document.querySelector("#s-break-button"),this.shortBreakButton.addEventListener("click",(function(){return t.updateTimer(i.load("short-break"),n.ShortBreak)})),this.pomodoroAutoCheckbox=document.querySelector("#pomodoro-auto-mode"),this.pomodoroAutoCheckbox.addEventListener("change",(function(){i.store("pomodoro_auto",t.pomodoroAutoCheckbox.checked)})),this.pomodoroBreaksInput=document.querySelector("#pomodoro-breaks"),this.pomodoroBreaksInput.addEventListener("change",(function(){i.store("max_break",t.pomodoroBreaksInput.value),i.store("cur_break",0)})),this.pomodoroAutoCheckbox.checked=JSON.parse(i.load("pomodoro_auto")),this.pomodoroBreaksInput.value=i.load("max_break"),this.alarmOverlay=document.querySelector("#alarm-overlay"),this.alarmOverlay.addEventListener("click",(function(){t.animateCSS("#test","bounceOut",(function(){t.alarmOverlay.classList.add("hidden")})),t.alarm.fade(i.load("volume"),0,2e3)})),this.infiniteAlarmCheckbox=document.querySelector("#infinite-alarm"),this.infiniteAlarmCheckbox.checked=i.loadBoolean("infinite-alarm"),this.infiniteAlarmCheckbox.addEventListener("change",(function(){i.store("infinite-alarm",t.infiniteAlarmCheckbox.checked)})),this.tabTimerCheckbox=document.querySelector("#tab-timer"),this.tabTimerCheckbox.checked=i.loadBoolean("tab-timer"),this.tabTimerCheckbox.addEventListener("change",(function(){i.store("tab-timer",t.tabTimerCheckbox.checked)})),this.notificationCheckbox=document.querySelector("#enable-notification"),this.notificationCheckbox.checked=i.loadBoolean("enable-notification"),this.notificationCheckbox.addEventListener("change",(function(){"default"===Notification.permission&&Notification.requestPermission(),i.store("enable-notification",t.notificationCheckbox.checked)})),document.querySelector("#start").addEventListener("click",(function(){return t.startTimer()})),document.querySelector("#stop").addEventListener("click",(function(){return t.stopTimer()})),document.querySelector("#reset").addEventListener("click",(function(){return t.resetTimer()})),document.querySelector("#settings").addEventListener("click",(function(){return t.overlayFadeIn()})),document.querySelector("#settings-close").addEventListener("click",(function(){return t.overlayFadeOut()})),document.querySelector("#c-pomodoro").addEventListener("change",(function(){i.store("pomodoro",document.querySelector("#c-pomodoro").value)})),document.querySelector("#c-l-break").addEventListener("change",(function(){i.store("long-break",document.querySelector("#c-l-break").value)})),document.querySelector("#c-s-break").addEventListener("change",(function(){i.store("short-break",document.querySelector("#c-s-break").value)})),document.querySelector("#custom-alarm").addEventListener("change",(function(){i.store("alarm",document.querySelector("#custom-alarm").value)})),document.querySelector("#volume-control").addEventListener("change",(function(){i.store("volume",document.querySelector("#volume-control").value)})),document.querySelector("#alarm-preview").addEventListener("click",(function(){new r.Howl({volume:i.load("volume"),html5:!0,src:["sounds/"+i.load("alarm")+".mp3"]}).play()})),document.querySelectorAll(".timer").forEach((function(e){return t.registerButtonhandle(e)})),this.indexAlarms(),window.localStorage||document.querySelector("#settings-button").remove(),document.querySelector("#c-pomodoro").value=i.load("pomodoro"),document.querySelector("#c-l-break").value=i.load("long-break"),document.querySelector("#c-s-break").value=i.load("short-break"),document.querySelector("#volume-control").value=i.load("volume"),this.time=e,this.updateTimer(this.time,n.Pomodoro)}return e.prototype.initTimer=function(){this.counter=60*this.time,this.display=this.time,this.sub_dis=0,this.is_ticking=!1},e.prototype.startTimer=function(){var e,t,o=this;this.is_ticking||("-"!=i.load("alarm")&&(this.alarm=new r.Howl({volume:i.load("volume"),html5:!1,loop:i.loadBoolean("infinite-alarm"),src:["sounds/"+i.load("alarm")+".mp3"]})),this.is_ticking=!0,this.interval=setInterval((function(){o.counter=o.counter-1,o.display=Math.floor(o.counter/60),0==o.sub_dis&&(o.sub_dis=60),o.sub_dis--,e=o.display.toString(),t=o.sub_dis.toString(),o.sub_dis<10&&(t="0"+o.sub_dis),o.display<10&&(e=0+o.display.toString()),o.timer.textContent=e,o.timerSub.textContent=t,i.loadBoolean("tab-timer")&&o.refreshTitle(e+":"+t),0===o.counter&&(o.alarm.play(),o.stopTimer(),i.loadBoolean("infinite-alarm")&&(o.alarmOverlay.classList.remove("hidden"),o.animateCSS("#alarm-overlay","bounceInDown",null)),i.loadBoolean("pomodoro_auto")&&(o.timerType!=n.ShortBreak&&o.timerType!==n.LongBreak||o.pomodoroButton.click(),o.timerType==n.Pomodoro&&(i.store("cur_break",+i.load("cur_break")+1),i.load("cur_break")<i.load("max_break")&&o.shortBreakButton.click(),i.load("cur_break")>=i.load("max_break")&&(i.store("cur_break",0),o.longBreakButton.click()))),o.resetTitle(),i.loadBoolean("enable-notification")&&o.constructNotification())}),1e3))},e.prototype.stopTimer=function(){this.is_ticking=!1,clearInterval(this.interval)},e.prototype.resetTimer=function(){this.stopTimer(),this.updateTimer(this.time)},e.prototype.updateTimer=function(e,t){this.stopTimer(),this.time=e,this.timerType=t;var o=e.toString();e<10&&(o=0+o),this.timer.textContent=o,this.timerSub.textContent="00",this.initTimer()},e.prototype.registerButtonhandle=function(e){e.addEventListener("click",(function(){document.querySelectorAll(".timer").forEach((function(e){return e.classList.remove("activated")})),e.classList.add("activated")}))},e.prototype.overlayFadeIn=function(){document.querySelector("#overlay").classList.remove("hidden"),this.animateCSS("#overlay","bounceInDown",null)},e.prototype.overlayFadeOut=function(){var e=document.querySelector("#overlay");this.animateCSS("#overlay","bounceOutUp",(function(){e.classList.add("hidden")})),this.is_ticking||this.refreshCurrentAlarm()},e.prototype.animateCSS=function(e,t,o){var n=document.querySelector(e);n.classList.add("animated",t),n.addEventListener("animationend",(function e(){n.classList.remove("animated",t),n.removeEventListener("animationend",e),"function"==typeof o&&o()}))},e.prototype.indexAlarms=function(){["-","Owl","Duck"].forEach((function(e){var t=document.createElement("option");t.value=e.toLowerCase(),t.text=e,i.load("alarm")===e.toLowerCase()&&(t.selected=!0),document.querySelector("#custom-alarm").add(t)}))},e.prototype.refreshCurrentAlarm=function(){this.timerType==n.Pomodoro&&this.pomodoroButton.click(),this.timerType==n.LongBreak&&this.longBreakButton.click(),this.timerType==n.ShortBreak&&this.shortBreakButton.click()},e.prototype.refreshTitle=function(e){document.title="BologneseTime - "+e},e.prototype.resetTitle=function(){document.title="BologneseTime"},e.prototype.initSettings=function(){i.storeIfNull("pomodoro",25),i.storeIfNull("long-break",20),i.storeIfNull("short-break",5),i.storeIfNull("alarm","owl"),i.storeIfNull("volume",.5),i.storeIfNull("pomodoro_auto",!1),i.storeIfNull("max_break",4),i.storeIfNull("cur_break",0),i.storeIfNull("tab-timer",!1),i.storeIfNull("infinite-alarm",!1),i.storeIfNull("enable-notification",!1)},e.prototype.constructNotification=function(){if("granted"===Notification.permission){var e=this.timerType.toString()+" finished!",t="Your timer has finished!";if(i.loadBoolean("pomodoro_auto")){var o=+i.load("cur_break"),n=+i.load("max_break"),r=n-o;t="Just "+r+" more pomodoro session(s) till a long break!",r===n&&(t="You've earned you a long break!")}this.notification=new Notification(e,{body:t,icon:"android-chrome-192x192.png"})}},e}();window.addEventListener("DOMContentLoaded",(function(){new a(i.load("pomodoro"))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,